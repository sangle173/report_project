{
  "version": 3,
  "sources": ["../../../../../../packages/platform-browser/src/browser/generic_browser_adapter.ts", "../../../../../../packages/platform-browser/src/browser/browser_adapter.ts", "../../../../../../packages/platform-browser/src/browser/testability.ts", "../../../../../../packages/platform-browser/src/browser/xhr.ts", "../../../../../../packages/platform-browser/src/dom/events/event_manager.ts", "../../../../../../packages/platform-browser/src/dom/shared_styles_host.ts", "../../../../../../packages/platform-browser/src/dom/dom_renderer.ts", "../../../../../../packages/platform-browser/src/dom/events/dom_events.ts", "../../../../../../packages/platform-browser/src/dom/events/key_events.ts", "../../../../../../packages/platform-browser/src/browser.ts", "../../../../../../packages/platform-browser/src/browser/meta.ts", "../../../../../../packages/platform-browser/src/browser/title.ts", "../../../../../../packages/platform-browser/src/dom/util.ts", "../../../../../../packages/platform-browser/src/browser/tools/browser.ts", "../../../../../../packages/platform-browser/src/browser/tools/common_tools.ts", "../../../../../../packages/platform-browser/src/browser/tools/tools.ts", "../../../../../../packages/platform-browser/src/dom/debug/by.ts", "../../../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts", "../../../../../../packages/platform-browser/src/security/dom_sanitization_service.ts", "../../../../../../packages/platform-browser/src/hydration.ts", "../../../../../../packages/platform-browser/src/version.ts", "../../../../../../packages/platform-browser/src/platform-browser.ts", "../../../../../../packages/platform-browser/public_api.ts", "../../../../../../packages/platform-browser/index.ts", "../../../../../../packages/platform-browser/platform-browser.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵDomAdapter as DomAdapter} from '@angular/common';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  override readonly supportsDOMEvents: boolean = true;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵparseCookieValue as parseCookieValue, ɵsetRootDomAdapter as setRootDomAdapter} from '@angular/common';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  override onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener);\n    return () => {\n      el.removeEventListener(evt, listener);\n    };\n  }\n  override dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  override remove(node: Node): void {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n  override createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  override createHtmlDocument(): Document {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  override getDefaultDocument(): Document {\n    return document;\n  }\n\n  override isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  override isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  override getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  override getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  override resetBaseElement(): void {\n    baseElement = null;\n  }\n  override getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  override getCookie(name: string): string|null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: HTMLAnchorElement|undefined;\nfunction relativePath(url: any): string {\n  urlParsingNode = urlParsingNode || document.createElement('a');\n  urlParsingNode.setAttribute('href', url);\n  const pathName = urlParsingNode.pathname;\n  return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {GetTestability, Testability, TestabilityRegistry, ɵglobal as global, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport class BrowserGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new RuntimeError(\n            RuntimeErrorCode.TESTABILITY_NOT_FOUND,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: (didWork: boolean) => void) => {\n      const testabilities = global['getAllAngularTestabilities']() as Testability[];\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: boolean) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach((testability) => {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  build(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken, NgZone, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../errors';\n\n/**\n * The injection token for plugins of the `EventManager` service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach((plugin) => {\n      plugin.manager = this;\n    });\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    let plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    plugin = plugins.find((plugin) => plugin.supports(eventName));\n    if (!plugin) {\n      throw new RuntimeError(\n          RuntimeErrorCode.NO_PLUGIN_FOR_EVENT,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `No event manager plugin found for event ${eventName}`);\n    }\n\n    this._eventNameToPlugin.set(eventName, plugin);\n    return plugin;\n  }\n}\n\n/**\n * The plugin definition for the `EventManager` class\n *\n * It can be used as a base class to create custom manager plugins, i.e. you can create your own\n * class that extends the `EventManagerPlugin` one.\n *\n * @publicApi\n */\nexport abstract class EventManagerPlugin {\n  // TODO: remove (has some usage in G3)\n  constructor(private _doc: any) {}\n\n  // Using non-null assertion because it's set by EventManager's constructor\n  manager!: EventManager;\n\n  /**\n   * Should return `true` for every event name that should be supported by this plugin\n   */\n  abstract supports(eventName: string): boolean;\n\n  /**\n   * Implement the behaviour for the supported events\n   */\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, isPlatformServer} from '@angular/common';\nimport {APP_ID, CSP_NONCE, Inject, Injectable, OnDestroy, Optional, PLATFORM_ID} from '@angular/core';\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\n\n@Injectable()\nexport class SharedStylesHost implements OnDestroy {\n  // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n  private readonly styleRef = new Map < string /** Style string */, {\n    elements: HTMLStyleElement[];\n    usage: number\n  }\n  > ();\n  private readonly hostNodes = new Set<Node>();\n  private readonly styleNodesInDOM: Map<string, HTMLStyleElement>|null;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n      @Inject(DOCUMENT) private readonly doc: Document,\n      @Inject(APP_ID) private readonly appId: string,\n      @Inject(CSP_NONCE) @Optional() private nonce?: string|null,\n      @Inject(PLATFORM_ID) readonly platformId: object = {}) {\n    this.styleNodesInDOM = this.collectServerRenderedStyles();\n    this.platformIsServer = isPlatformServer(platformId);\n    this.resetHostNodes();\n  }\n\n  addStyles(styles: string[]): void {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, 1);\n\n      if (usageCount === 1) {\n        this.onStyleAdded(style);\n      }\n    }\n  }\n\n  removeStyles(styles: string[]): void {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, -1);\n\n      if (usageCount <= 0) {\n        this.onStyleRemoved(style);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    if (styleNodesInDOM) {\n      styleNodesInDOM.forEach((node) => node.remove());\n      styleNodesInDOM.clear();\n    }\n\n    for (const style of this.getAllStyles()) {\n      this.onStyleRemoved(style);\n    }\n\n    this.resetHostNodes();\n  }\n\n  addHost(hostNode: Node): void {\n    this.hostNodes.add(hostNode);\n\n    for (const style of this.getAllStyles()) {\n      this.addStyleToHost(hostNode, style);\n    }\n  }\n\n  removeHost(hostNode: Node): void {\n    this.hostNodes.delete(hostNode);\n  }\n\n  private getAllStyles(): IterableIterator<string> {\n    return this.styleRef.keys();\n  }\n\n  private onStyleAdded(style: string): void {\n    for (const host of this.hostNodes) {\n      this.addStyleToHost(host, style);\n    }\n  }\n\n  private onStyleRemoved(style: string): void {\n    const styleRef = this.styleRef;\n    styleRef.get(style)?.elements?.forEach((node) => node.remove());\n    styleRef.delete(style);\n  }\n\n  private collectServerRenderedStyles(): Map<string, HTMLStyleElement>|null {\n    const styles = this.doc.head?.querySelectorAll<HTMLStyleElement>(\n        `style[${APP_ID_ATTRIBUTE_NAME}=\"${this.appId}\"]`);\n\n    if (styles?.length) {\n      const styleMap = new Map<string, HTMLStyleElement>();\n\n      styles.forEach((style) => {\n        if (style.textContent != null) {\n          styleMap.set(style.textContent, style);\n        }\n      });\n\n      return styleMap;\n    }\n\n    return null;\n  }\n\n  private changeUsageCount(style: string, delta: number): number {\n    const map = this.styleRef;\n    if (map.has(style)) {\n      const styleRefValue = map.get(style)!;\n      styleRefValue.usage += delta;\n\n      return styleRefValue.usage;\n    }\n\n    map.set(style, {usage: delta, elements: []});\n    return delta;\n  }\n\n  private getStyleElement(host: Node, style: string): HTMLStyleElement {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    const styleEl = styleNodesInDOM?.get(style);\n    if (styleEl?.parentNode === host) {\n      // `styleNodesInDOM` cannot be undefined due to the above `styleNodesInDOM?.get`.\n      styleNodesInDOM!.delete(style);\n\n      styleEl.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // This attribute is solely used for debugging purposes.\n        styleEl.setAttribute('ng-style-reused', '');\n      }\n\n      return styleEl;\n    } else {\n      const styleEl = this.doc.createElement('style');\n\n      if (this.nonce) {\n        styleEl.setAttribute('nonce', this.nonce);\n      }\n\n      styleEl.textContent = style;\n\n      if (this.platformIsServer) {\n        styleEl.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n      }\n\n      host.appendChild(styleEl);\n\n      return styleEl;\n    }\n  }\n\n  private addStyleToHost(host: Node, style: string): void {\n    const styleEl = this.getStyleElement(host, style);\n    const styleRef = this.styleRef;\n    const styleElRef = styleRef.get(style)?.elements;\n    if (styleElRef) {\n      styleElRef.push(styleEl);\n    } else {\n      styleRef.set(style, {elements: [styleEl], usage: 1});\n    }\n  }\n\n  private resetHostNodes(): void {\n    const hostNodes = this.hostNodes;\n    hostNodes.clear();\n    // Re-add the head element back since this is the default host.\n    hostNodes.add(this.doc.head);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, isPlatformServer, ɵgetDOM as getDOM} from '@angular/common';\nimport {APP_ID, CSP_NONCE, Inject, Injectable, InjectionToken, NgZone, OnDestroy, PLATFORM_ID, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nimport {EventManager} from './events/event_manager';\nimport {SharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/MathML/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `true`.\n * @publicApi\n */\nexport const REMOVE_STYLES_ON_COMPONENT_DESTROY =\n    new InjectionToken<boolean>('RemoveStylesOnCompDestroy', {\n      providedIn: 'root',\n      factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT,\n    });\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimStylesContent(compId: string, styles: string[]): string[] {\n  return styles.map(s => s.replace(COMPONENT_REGEX, compId));\n}\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2, OnDestroy {\n  private readonly rendererByCompId =\n      new Map<string, EmulatedEncapsulationDomRenderer2|NoneEncapsulationDomRenderer>();\n  private readonly defaultRenderer: Renderer2;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n      private readonly eventManager: EventManager,\n      private readonly sharedStylesHost: SharedStylesHost,\n      @Inject(APP_ID) private readonly appId: string,\n      @Inject(REMOVE_STYLES_ON_COMPONENT_DESTROY) private removeStylesOnCompDestroy: boolean,\n      @Inject(DOCUMENT) private readonly doc: Document,\n      @Inject(PLATFORM_ID) readonly platformId: Object,\n      readonly ngZone: NgZone,\n      @Inject(CSP_NONCE) private readonly nonce: string|null = null,\n  ) {\n    this.platformIsServer = isPlatformServer(platformId);\n    this.defaultRenderer =\n        new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n\n    if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {\n      // Domino does not support shadow DOM.\n      type = {...type, encapsulation: ViewEncapsulation.Emulated};\n    }\n\n    const renderer = this.getOrCreateRenderer(element, type);\n    // Renderers have different logic due to different encapsulation behaviours.\n    // Ex: for emulated, an attribute is added to the element.\n    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n      renderer.applyToHost(element);\n    } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n      renderer.applyStyles();\n    }\n\n    return renderer;\n  }\n\n  private getOrCreateRenderer(element: any, type: RendererType2): Renderer2 {\n    const rendererByCompId = this.rendererByCompId;\n    let renderer = rendererByCompId.get(type.id);\n\n    if (!renderer) {\n      const doc = this.doc;\n      const ngZone = this.ngZone;\n      const eventManager = this.eventManager;\n      const sharedStylesHost = this.sharedStylesHost;\n      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n      const platformIsServer = this.platformIsServer;\n\n      switch (type.encapsulation) {\n        case ViewEncapsulation.Emulated:\n          renderer = new EmulatedEncapsulationDomRenderer2(\n              eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc,\n              ngZone, platformIsServer);\n          break;\n        case ViewEncapsulation.ShadowDom:\n          return new ShadowDomRenderer(\n              eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce,\n              platformIsServer);\n        default:\n          renderer = new NoneEncapsulationDomRenderer(\n              eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone,\n              platformIsServer);\n          break;\n      }\n\n      rendererByCompId.set(type.id, renderer);\n    }\n\n    return renderer;\n  }\n\n  ngOnDestroy() {\n    this.rendererByCompId.clear();\n  }\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  /**\n   * By default this renderer throws when encountering synthetic properties\n   * This can be disabled for example by the AsyncAnimationRendererFactory\n   */\n  throwOnSyntheticProps = true;\n\n  constructor(\n      private readonly eventManager: EventManager, private readonly doc: Document,\n      private readonly ngZone: NgZone, private readonly platformIsServer: boolean) {}\n\n  destroy(): void {}\n\n  destroyNode = null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return this.doc.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return this.doc.createComment(value);\n  }\n\n  createText(value: string): any {\n    return this.doc.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new RuntimeError(\n          RuntimeErrorCode.ROOT_NODE_NOT_FOUND,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    if (el == null) {\n      return;\n    }\n\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.throwOnSyntheticProps &&\n        checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && this.throwOnSyntheticProps &&\n        checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      target = getDOM().getGlobalEventTarget(this.doc, target);\n      if (!target) {\n        throw new Error(`Unsupported event target ${target} for event ${event}`);\n      }\n    }\n\n    return this.eventManager.addEventListener(\n               target, event, this.decoratePreventDefault(callback)) as VoidFunction;\n  }\n\n  private decoratePreventDefault(eventHandler: Function): Function {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n    // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n    // unwrap the listener (see below).\n    return (event: any) => {\n      // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n      // debug_node can inspect the listener toString contents for the existence of this special\n      // token. Because the token is a string literal, it is ensured to not be modified by compiled\n      // code.\n      if (event === '__ngUnwrap__') {\n        return eventHandler;\n      }\n\n      // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n      const allowDefaultBehavior = this.platformIsServer ?\n          this.ngZone.runGuarded(() => eventHandler(event)) :\n          eventHandler(event);\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n      }\n\n      return undefined;\n    };\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY,\n        `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${\n            name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\n\n\nfunction isTemplateNode(node: any): node is HTMLTemplateElement {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager,\n      private sharedStylesHost: SharedStylesHost,\n      private hostEl: any,\n      component: RendererType2,\n      doc: Document,\n      ngZone: NgZone,\n      nonce: string|null,\n      platformIsServer: boolean,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = shimStylesContent(component.id, component.styles);\n\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n\n      if (nonce) {\n        styleEl.setAttribute('nonce', nonce);\n      }\n\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  override appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  override insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  override removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  override parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n\n  override destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n}\n\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  private readonly styles: string[];\n\n  constructor(\n      eventManager: EventManager,\n      private readonly sharedStylesHost: SharedStylesHost,\n      component: RendererType2,\n      private removeStylesOnCompDestroy: boolean,\n      doc: Document,\n      ngZone: NgZone,\n      platformIsServer: boolean,\n      compId?: string,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.styles = compId ? shimStylesContent(compId, component.styles) : component.styles;\n  }\n\n  applyStyles(): void {\n    this.sharedStylesHost.addStyles(this.styles);\n  }\n\n  override destroy(): void {\n    if (!this.removeStylesOnCompDestroy) {\n      return;\n    }\n\n    this.sharedStylesHost.removeStyles(this.styles);\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: SharedStylesHost, component: RendererType2,\n      appId: string, removeStylesOnCompDestroy: boolean, doc: Document, ngZone: NgZone,\n      platformIsServer: boolean) {\n    const compId = appId + '-' + component.id;\n    super(\n        eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone,\n        platformIsServer, compId);\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n\n  applyToHost(element: any): void {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n\n  override createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, handler as EventListener, false);\n    return () => this.removeEventListener(element, eventName, handler as EventListener);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    return target.removeEventListener(eventName, callback as EventListener);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap: {[k: string]: string} = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  override supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n  static parseEventName(eventName: string): {fullKey: string, domEventName: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string, domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n  static matchEventFullKeyCode(event: KeyboardEvent, fullKeyCode: string): boolean {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    }\n    // the keycode could be unidentified so we have to check here\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n    if (keycode === ' ') {\n      keycode = 'space';  // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: string, handler: Function, zone: NgZone): Function {\n    return (event: KeyboardEvent) => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    return keyName === 'esc' ? 'escape' : keyName;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, DOCUMENT, XhrFactory, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationConfig as ApplicationConfigFromCore, ApplicationModule, ApplicationRef, createPlatformFactory, ErrorHandler, Inject, InjectionToken, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, platformCore, PlatformRef, Provider, RendererFactory2, SkipSelf, StaticProvider, Testability, TestabilityRegistry, Type, ɵINJECTOR_SCOPE as INJECTOR_SCOPE, ɵinternalCreateApplication as internalCreateApplication, ɵRuntimeError as RuntimeError, ɵsetDocument, ɵTESTABILITY as TESTABILITY, ɵTESTABILITY_GETTER as TESTABILITY_GETTER} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserGetTestability} from './browser/testability';\nimport {BrowserXhr} from './browser/xhr';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {SharedStylesHost} from './dom/shared_styles_host';\nimport {RuntimeErrorCode} from './errors';\n\n\n/**\n * Set of config options available during the application bootstrap operation.\n *\n * @publicApi\n *\n * @deprecated\n * `ApplicationConfig` has moved, please import `ApplicationConfig` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\ntype ApplicationConfig = ApplicationConfigFromCore;\nexport {ApplicationConfig};\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function bootstrapApplication(\n    rootComponent: Type<unknown>, options?: ApplicationConfig): Promise<ApplicationRef> {\n  return internalCreateApplication({rootComponent, ...createProvidersConfig(options)});\n}\n\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function createApplication(options?: ApplicationConfig) {\n  return internalCreateApplication(createProvidersConfig(options));\n}\n\nfunction createProvidersConfig(options?: ApplicationConfig) {\n  return {\n    appProviders: [\n      ...BROWSER_MODULE_PROVIDERS,\n      ...(options?.providers ?? []),\n    ],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n  };\n}\n\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nexport function provideProtractorTestingSupport(): Provider[] {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(\n    (typeof ngDevMode === 'undefined' || ngDevMode) ? 'BrowserModule Providers Marker' : '');\n\nconst TESTABILITY_PROVIDERS = [\n  {\n    provide: TESTABILITY_GETTER,\n    useClass: BrowserGetTestability,\n    deps: [],\n  },\n  {\n    provide: TESTABILITY,\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  },\n  {\n    provide: Testability,  // Also provide as `Testability` for backwards-compatibility.\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  }\n];\n\nconst BROWSER_MODULE_PROVIDERS: Provider[] = [\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []}, {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  DomRendererFactory2, SharedStylesHost, EventManager,\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: XhrFactory, useClass: BrowserXhr, deps: []},\n  (typeof ngDevMode === 'undefined' || ngDevMode) ?\n      {provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true} :\n      []\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n  exports: [CommonModule, ApplicationModule],\n})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BROWSER_MODULE_PROVIDERS_MARKER)\n              providersAlreadyPresent: boolean|null) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && providersAlreadyPresent) {\n      throw new RuntimeError(\n          RuntimeErrorCode.BROWSER_MODULE_ALREADY_LOADED,\n          `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` +\n              `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   *\n   * @deprecated Use {@link APP_ID} instead to set the application ID.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n      ],\n    };\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵDomAdapter as DomAdapter, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n/**\n * Represents the attributes of an HTML `<meta>` element. The element itself is\n * represented by the internal `HTMLMetaElement`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see {@link Meta}\n *\n * @publicApi\n */\nexport type MetaDefinition = {\n  charset?: string;\n  content?: string;\n  httpEquiv?: string;\n  id?: string;\n  itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n}&{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\nexport function createMeta() {\n  return new Meta(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    this._dom = getDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector)!;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n  removeTag(attrSelector: string): void {\n    this.removeTagElement(this.getTag(attrSelector)!);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n      if (elem !== undefined) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._doc.getElementsByTagName('head')[0];\n    head.appendChild(element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach(\n        (prop: string) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every(\n        (key: string) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n  }\n\n  private _getMetaKeyMap(prop: string): string {\n    return META_KEYS_MAP[prop] || prop;\n  }\n}\n\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP: {[prop: string]: string;} = {\n  httpEquiv: 'http-equiv'\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n\n/**\n * Factory to create Title service.\n */\nexport function createTitle() {\n  return new Title(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createTitle, deps: []})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵglobal as global} from '@angular/core';\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as {[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst win = typeof window !== 'undefined' && window || <any>{};\nexport {win as window};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\n\nimport {window} from './browser';\n\nexport class ChangeDetectionPerfRecord {\n  constructor(public msPerTick: number, public numTicks: number) {}\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    const isProfilerAvailable = window.console.profile != null;\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const start = performanceNow();\n    let numTicks = 0;\n    while (numTicks < 5 || (performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performanceNow();\n    if (record && isProfilerAvailable) {\n      window.console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n\nfunction performanceNow() {\n  return window.performance && window.performance.now ? window.performance.now() :\n                                                        new Date().getTime();\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\nimport {exportNgVar} from '../../dom/util';\nimport {AngularProfiler} from './common_tools';\n\nconst PROFILER_GLOBAL_NAME = 'profiler';\n\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T> {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport function disableDebugTools(): void {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {DebugElement, DebugNode, Predicate, Type} from '@angular/core';\n\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugNode> {\n    return () => true;\n  }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null ?\n          elementMatches(debugElement.nativeElement, selector) :\n          false;\n    };\n  }\n\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugNode> {\n    return (debugNode) => debugNode.providerTokens!.indexOf(type) !== -1;\n  }\n}\n\nfunction elementMatches(n: any, selector: string): boolean {\n  if (getDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) ||\n        n.msMatchesSelector && n.msMatchesSelector(selector) ||\n        n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n\n  return false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgModule, Optional, Provider, ɵConsole as Console} from '@angular/core';\n\nimport {EVENT_MANAGER_PLUGINS, EventManagerPlugin} from './event_manager';\n\n\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see {@link HammerGestureConfig}\n *\n * @ngModule HammerModule\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   *\n   * The key is a supported event name to be configured,\n   * and the options object contains a set of properties, with override values\n   * to be applied to the named recognizer event.\n   * For example, to disable recognition of the rotate event, specify\n   *  `{\"rotate\": {\"enable\": false}}`.\n   *\n   * Properties that are not present take the HammerJS default values.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   *\n   */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer!(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  private _loaderPromise: Promise<void>|null = null;\n\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  override supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        this.console.warn(\n            `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n            `loaded and no custom loader has been specified.`);\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader!());\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => {\n        cancelRegistration = true;\n      };\n\n      zone.runOutsideAngular(\n          () => this._loaderPromise!\n                    .then(() => {\n                      // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                      if (!(window as any).Hammer) {\n                        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                          this.console.warn(\n                              `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n                        }\n                        deregister = () => {};\n                        return;\n                      }\n\n                      if (!cancelRegistration) {\n                        // Now that Hammer is loaded and the listener is being loaded for real,\n                        // the deregistration function changes from canceling registration to\n                        // removal.\n                        deregister = this.addEventListener(element, eventName, handler);\n                      }\n                    })\n                    .catch(() => {\n                      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                        this.console.warn(\n                            `The \"${eventName}\" event cannot be bound because the custom ` +\n                            `Hammer.JS loader failed.`);\n                      }\n                      deregister = () => {};\n                    }));\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n}\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's `EventManager`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    {\n      provide: EVENT_MANAGER_PLUGINS,\n      useClass: HammerGesturesPlugin,\n      multi: true,\n      deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n    },\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n  ]\n})\nexport class HammerModule {\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {forwardRef, Inject, Injectable, Injector, Sanitizer, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeUrl as _sanitizeUrl, ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow, ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl, ɵBypassType as BypassType, ɵRuntimeError as RuntimeError, ɵunwrapSafeValue as unwrapSafeValue, ɵXSS_SECURITY_URL as XSS_SECURITY_URL} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport {SecurityContext};\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Gets a safe value from either a known safe value or a value with unknown safety.\n   *\n   * If the given value is already a `SafeValue`, this method returns the unwrapped value.\n   * If the security context is HTML and the given value is a plain string, this method\n   * sanitizes the string, removing any potentially unsafe content.\n   * For any other security context, this method throws an error if provided\n   * with a plain string.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nexport function domSanitizerImplFactory(injector: Injector) {\n  return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\n\n@Injectable({providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [Injector]})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNSAFE_SCRIPT,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNSAFE_RESOURCE_URL,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n      default:\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNEXPECTED_CTX,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`);\n    }\n  }\n\n  override bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  override bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  override bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  override bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  override bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpTransferCacheOptions, ɵwithHttpTransferCache} from '@angular/common/http';\nimport {ENVIRONMENT_INITIALIZER, EnvironmentProviders, inject, makeEnvironmentProviders, NgZone, Provider, ɵConsole as Console, ɵformatRuntimeError as formatRuntimeError, ɵwithDomHydration as withDomHydration,} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * The list of features as an enum to uniquely type each `HydrationFeature`.\n * @see {@link HydrationFeature}\n *\n * @publicApi\n */\nexport const enum HydrationFeatureKind {\n  NoHttpTransferCache,\n  HttpTransferCacheOptions,\n}\n\n/**\n * Helper type to represent a Hydration feature.\n *\n * @publicApi\n */\nexport interface HydrationFeature<FeatureKind extends HydrationFeatureKind> {\n  ɵkind: FeatureKind;\n  ɵproviders: Provider[];\n}\n\n/**\n * Helper function to create an object that represents a Hydration feature.\n */\nfunction hydrationFeature<FeatureKind extends HydrationFeatureKind>(\n    ɵkind: FeatureKind, ɵproviders: Provider[] = [],\n    ɵoptions: unknown = {}): HydrationFeature<FeatureKind> {\n  return {ɵkind, ɵproviders};\n}\n\n/**\n * Disables HTTP transfer cache. Effectively causes HTTP requests to be performed twice: once on the\n * server and other one on the browser.\n *\n * @publicApi\n */\nexport function withNoHttpTransferCache():\n    HydrationFeature<HydrationFeatureKind.NoHttpTransferCache> {\n  // This feature has no providers and acts as a flag that turns off\n  // HTTP transfer cache (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoHttpTransferCache);\n}\n\n/**\n * The function accepts a an object, which allows to configure cache parameters,\n * such as which headers should be included (no headers are included by default),\n * wether POST requests should be cached or a callback function to determine if a\n * particular request should be cached.\n *\n * @publicApi\n */\nexport function withHttpTransferCacheOptions(\n    options: HttpTransferCacheOptions,\n    ): HydrationFeature<HydrationFeatureKind.HttpTransferCacheOptions> {\n  // This feature has no providers and acts as a flag to pass options to the HTTP transfer cache.\n  return hydrationFeature(\n      HydrationFeatureKind.HttpTransferCacheOptions, ɵwithHttpTransferCache(options));\n}\n\n/**\n * Returns an `ENVIRONMENT_INITIALIZER` token setup with a function\n * that verifies whether compatible ZoneJS was used in an application\n * and logs a warning in a console if it's not the case.\n */\nfunction provideZoneJsCompatibilityDetector(): Provider[] {\n  return [{\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      const ngZone = inject(NgZone);\n      // Checking `ngZone instanceof NgZone` would be insufficient here,\n      // because custom implementations might use NgZone as a base class.\n      if (ngZone.constructor !== NgZone) {\n        const console = inject(Console);\n        const message = formatRuntimeError(\n            RuntimeErrorCode.UNSUPPORTED_ZONEJS_INSTANCE,\n            'Angular detected that hydration was enabled for an application ' +\n                'that uses a custom or a noop Zone.js implementation. ' +\n                'This is not yet a fully supported configuration.');\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n      }\n    },\n    multi: true,\n  }];\n}\n\n/**\n * Sets up providers necessary to enable hydration functionality for the application.\n *\n * By default, the function enables the recommended set of features for the optimal\n * performance for most of the applications. It includes the following features:\n *\n * * Reconciling DOM hydration. Learn more about it [here](guide/hydration).\n * * [`HttpClient`](api/common/http/HttpClient) response caching while running on the server and\n * transferring this cache to the client to avoid extra HTTP requests. Learn more about data caching\n * [here](/guide/ssr#caching-data-when-using-httpclient).\n *\n * These functions allow you to disable some of the default features or configure features\n * * {@link withNoHttpTransferCache} to disable HTTP transfer cache\n * * {@link withHttpTransferCacheOptions} to configure some HTTP transfer cache options\n *\n * @usageNotes\n *\n * Basic example of how you can enable hydration in your application when\n * `bootstrapApplication` function is used:\n * ```\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration()]\n * });\n * ```\n *\n * Alternatively if you are using NgModules, you would add `provideClientHydration`\n * to your root app module's provider list.\n * ```\n * @NgModule({\n *   declarations: [RootCmp],\n *   bootstrap: [RootCmp],\n *   providers: [provideClientHydration()],\n * })\n * export class AppModule {}\n * ```\n *\n * @see {@link withNoHttpTransferCache}\n * @see {@link withHttpTransferCacheOptions}\n *\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to enable hydration.\n *\n * @publicApi\n */\nexport function provideClientHydration(...features: HydrationFeature<HydrationFeatureKind>[]):\n    EnvironmentProviders {\n  const providers: Provider[] = [];\n  const featuresKind = new Set<HydrationFeatureKind>();\n  const hasHttpTransferCacheOptions =\n      featuresKind.has(HydrationFeatureKind.HttpTransferCacheOptions);\n\n  for (const {ɵproviders, ɵkind} of features) {\n    featuresKind.add(ɵkind);\n\n    if (ɵproviders.length) {\n      providers.push(ɵproviders);\n    }\n  }\n\n  if (typeof ngDevMode !== 'undefined' && ngDevMode &&\n      featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) && hasHttpTransferCacheOptions) {\n    // TODO: Make this a runtime error\n    throw new Error(\n        'Configuration error: found both withHttpTransferCacheOptions() and withNoHttpTransferCache() in the same call to provideClientHydration(), which is a contradiction.');\n  }\n\n  return makeEnvironmentProviders([\n    (typeof ngDevMode !== 'undefined' && ngDevMode) ? provideZoneJsCompatibilityDetector() : [],\n    withDomHydration(),\n    ((featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) || hasHttpTransferCacheOptions) ?\n         [] :\n         ɵwithHttpTransferCache({})),\n    providers,\n  ]);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('17.0.3');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Re-export TransferState to the public API of the `platform-browser` for backwards-compatibility.\nimport {makeStateKey as makeStateKeyFromCore, StateKey as StateKeyFromCore, TransferState as TransferStateFromCore} from '@angular/core';\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n * @deprecated `makeStateKey` has moved, please import `makeStateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nexport const makeStateKey = makeStateKeyFromCore;\n\n/**\n *\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n *\n * @deprecated `TransferState` has moved, please import `TransferState` from `@angular/core`\n *     instead.\n */\n// The below is a workaround to add a deprecated message.\nexport type TransferState = TransferStateFromCore;\n// The below type is needed for G3 due to JSC_CONFORMANCE_VIOLATION.\nexport const TransferState: {new (): TransferStateFromCore} = TransferStateFromCore;\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n * @publicApi\n *\n * @deprecated `StateKey` has moved, please import `StateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nexport type StateKey<T> = StateKeyFromCore<T>;\n\nexport {ApplicationConfig, bootstrapApplication, BrowserModule, createApplication, platformBrowser, provideProtractorTestingSupport} from './browser';\nexport {Meta, MetaDefinition} from './browser/meta';\nexport {Title} from './browser/title';\nexport {disableDebugTools, enableDebugTools} from './browser/tools/tools';\nexport {By} from './dom/debug/by';\nexport {REMOVE_STYLES_ON_COMPONENT_DESTROY} from './dom/dom_renderer';\nexport {EVENT_MANAGER_PLUGINS, EventManager, EventManagerPlugin} from './dom/events/event_manager';\nexport {HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerLoader, HammerModule} from './dom/events/hammer_gestures';\nexport {DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl, SafeValue} from './security/dom_sanitization_service';\nexport {HydrationFeature, provideClientHydration, HydrationFeatureKind, withHttpTransferCacheOptions, withNoHttpTransferCache} from './hydration';\n\nexport * from './private_export';\nexport {VERSION} from './version';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/platform-browser';\n// This file only reexports content of the `src` folder. Keep it that way.\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["GenericBrowserDomAdapter", "ɵDomAdapter", "constructor", "supportsDOMEvents", "BrowserDomAdapter", "makeCurrent", "ɵsetRootDomAdapter", "onAndCancel", "el", "evt", "listener", "addEventListener", "removeEventListener", "dispatchEvent", "remove", "node", "parentNode", "removeChild", "createElement", "tagName", "doc", "getDefaultDocument", "createHtmlDocument", "document", "implementation", "createHTMLDocument", "isElementNode", "nodeType", "Node", "ELEMENT_NODE", "isShadowRoot", "DocumentFragment", "getGlobalEventTarget", "target", "window", "body", "getBaseHref", "href", "getBaseElementHref", "relativePath", "resetBaseElement", "baseElement", "getUserAgent", "navigator", "userAgent", "getCookie", "name", "ɵparseCookieValue", "cookie", "querySelector", "getAttribute", "urlParsingNode", "url", "setAttribute", "pathName", "pathname", "charAt", "BrowserGetTestability", "addToWindow", "registry", "ɵglobal", "elem", "findInAncestors", "testability", "findTestabilityInTree", "ɵRuntimeError", "ngDevMode", "getAllTestabilities", "getAllRootElements", "whenAllStable", "callback", "testabilities", "count", "length", "didWork", "decrement", "didWork_", "forEach", "whenStable", "push", "t", "getTestability", "ɵgetDOM", "host", "parentElement", "BrowserXhr", "build", "XMLHttpRequest", "Injectable", "EVENT_MANAGER_PLUGINS", "InjectionToken", "EventManager", "plugins", "_zone", "_eventNameToPlugin", "Map", "plugin", "manager", "_plugins", "slice", "reverse", "element", "eventName", "handler", "_findPluginFor", "getZone", "get", "find", "supports", "set", "ɵfac", "EventManager_Factory", "NgZone", "factory", "Inject", "EventManagerPlugin", "_doc", "APP_ID_ATTRIBUTE_NAME", "SharedStylesHost", "appId", "nonce", "platformId", "styleRef", "hostNodes", "Set", "styleNodesInDOM", "collectServerRenderedStyles", "platformIsServer", "isPlatformServer", "resetHostNodes", "addStyles", "styles", "style", "usageCount", "changeUsageCount", "onStyleAdded", "removeStyles", "onStyleRemoved", "ngOnDestroy", "clear", "getAllStyles", "addHost", "hostNode", "add", "addStyleToHost", "removeHost", "delete", "keys", "elements", "head", "querySelectorAll", "styleMap", "textContent", "delta", "map", "has", "styleRefValue", "usage", "getStyleElement", "styleEl", "removeAttribute", "appendChild", "styleElRef", "SharedStylesHost_Factory", "DOCUMENT", "APP_ID", "CSP_NONCE", "PLATFORM_ID", "Optional", "NAMESPACE_URIS", "COMPONENT_REGEX", "COMPONENT_VARIABLE", "HOST_ATTR", "CONTENT_ATTR", "REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT", "REMOVE_STYLES_ON_COMPONENT_DESTROY", "providedIn", "shimContentAttribute", "componentShortId", "replace", "shimHostAttribute", "shimStylesContent", "compId", "s", "DomRendererFactory2", "eventManager", "sharedStylesHost", "removeStylesOnCompDestroy", "ngZone", "rendererByCompId", "defaultRenderer", "DefaultDomRenderer2", "createRenderer", "type", "encapsulation", "ViewEncapsulation", "ShadowDom", "Emulated", "renderer", "getOrCreateRenderer", "EmulatedEncapsulationDomRenderer2", "applyToHost", "NoneEncapsulationDomRenderer", "applyStyles", "id", "ShadowDomRenderer", "data", "Object", "create", "throwOnSyntheticProps", "destroyNode", "destroy", "namespace", "createElementNS", "createComment", "value", "createText", "createTextNode", "parent", "newChild", "targetParent", "isTemplateNode", "content", "insertBefore", "refChild", "oldChild", "selectRootElement", "selectorOrNode", "preserveContent", "nextSibling", "namespaceUri", "setAttributeNS", "removeAttributeNS", "addClass", "classList", "removeClass", "setStyle", "flags", "RendererStyleFlags2", "DashCase", "Important", "setProperty", "removeStyle", "removeProperty", "checkNoSyntheticProp", "setValue", "nodeValue", "listen", "event", "Error", "decoratePreventDefault", "eventHandler", "allowDefaultBehavior", "runGuarded", "preventDefault", "undefined", "AT_CHARCODE", "charCodeAt", "nameKind", "hostEl", "component", "shadowRoot", "attachShadow", "mode", "nodeOrShadowRoot", "contentAttr", "hostAttr", "DomEventsPlugin", "DomEventsPlugin_Factory", "MODIFIER_KEYS", "_keyMap", "MODIFIER_KEY_GETTERS", "altKey", "ctrlKey", "metaKey", "shiftKey", "KeyEventsPlugin", "parseEventName", "parsedEvent", "outsideHandler", "eventCallback", "runOutsideAngular", "parts", "toLowerCase", "split", "domEventName", "shift", "key", "_normalizeKey", "pop", "fullKey", "codeIX", "indexOf", "splice", "modifierName", "index", "result", "matchEventFullKeyCode", "fullKeyCode", "keycode", "code", "modifierGetter", "zone", "keyName", "KeyEventsPlugin_Factory", "bootstrapApplication", "rootComponent", "options", "ɵinternalCreateApplication", "createProvidersConfig", "createApplication", "appProviders", "BROWSER_MODULE_PROVIDERS", "providers", "platformProviders", "INTERNAL_BROWSER_PLATFORM_PROVIDERS", "provideProtractorTestingSupport", "TESTABILITY_PROVIDERS", "initDomAdapter", "errorHandler", "ErrorHandler", "_document", "ɵsetDocument", "provide", "useValue", "ɵPLATFORM_BROWSER_ID", "PLATFORM_INITIALIZER", "multi", "useFactory", "deps", "platformBrowser", "createPlatformFactory", "platformCore", "BROWSER_MODULE_PROVIDERS_MARKER", "ɵTESTABILITY_GETTER", "useClass", "ɵTESTABILITY", "Testability", "TestabilityRegistry", "ɵINJECTOR_SCOPE", "RendererFactory2", "useExisting", "XhrFactory", "BrowserModule", "providersAlreadyPresent", "withServerTransition", "params", "ngModule", "BrowserModule_Factory", "exports", "CommonModule", "ApplicationModule", "imports", "NgModule", "args", "SkipSelf", "createMeta", "Meta", "ɵɵinject", "_dom", "addTag", "tag", "forceCreation", "_getOrCreateElement", "addTags", "tags", "reduce", "getTag", "attrSelector", "getTags", "list", "call", "updateTag", "selector", "_parseSelector", "meta", "_setMetaElementAttributes", "removeTag", "removeTagElement", "filter", "_containsAttributes", "getElementsByTagName", "prop", "_getMetaKeyMap", "attr", "every", "META_KEYS_MAP", "Meta_Factory", "r", "httpEquiv", "createTitle", "Title", "getTitle", "title", "setTitle", "newTitle", "Title_Factory", "exportNgVar", "COMPILED", "ng", "win", "ChangeDetectionPerfRecord", "msPerTick", "numTicks", "AngularProfiler", "ref", "appRef", "injector", "ApplicationRef", "timeChangeDetection", "config", "record", "profileName", "isProfilerAvailable", "console", "profile", "start", "performanceNow", "tick", "end", "profileEnd", "log", "toFixed", "performance", "now", "Date", "getTime", "PROFILER_GLOBAL_NAME", "enableDebugTools", "disableDebugTools", "By", "all", "css", "debugElement", "nativeElement", "elementMatches", "directive", "debugNode", "providerTokens", "n", "matches", "msMatchesSelector", "webkitMatchesSelector", "EVENT_NAMES", "HAMMER_GESTURE_CONFIG", "HAMMER_LOADER", "HammerGestureConfig", "events", "overrides", "buildHammer", "mc", "Hammer", "enable", "HammerGesturesPlugin", "_config", "loader", "_loaderPromise", "hasOwnProperty", "isCustomEvent", "warn", "cancelRegistration", "deregister", "then", "catch", "eventObj", "on", "off", "HammerGesturesPlugin_Factory", "ɵConsole", "HammerModule", "ɵinj", "DomSanitizer", "DomSanitizer_Factory", "DomSanitizerImpl", "forwardRef", "domSanitizerImplFactory", "sanitize", "ctx", "SecurityContext", "NONE", "HTML", "ɵallowSanitizationBypassAndThrow", "ɵunwrapSafeValue", "ɵ_sanitizeHtml", "String", "toString", "STYLE", "SCRIPT", "URL", "ɵ_sanitizeUrl", "RESOURCE_URL", "ɵXSS_SECURITY_URL", "bypassSecurityTrustHtml", "ɵbypassSanitizationTrustHtml", "bypassSecurityTrustStyle", "ɵbypassSanitizationTrustStyle", "bypassSecurityTrustScript", "ɵbypassSanitizationTrustScript", "bypassSecurityTrustUrl", "ɵbypassSanitizationTrustUrl", "bypassSecurityTrustResourceUrl", "ɵbypassSanitizationTrustResourceUrl", "DomSanitizerImpl_Factory", "ɵprov", "Injector", "hydrationFeature", "ɵkind", "ɵproviders", "ɵoptions", "withNoHttpTransferCache", "withHttpTransferCacheOptions", "ɵwithHttpTransferCache", "provideZoneJsCompatibilityDetector", "ENVIRONMENT_INITIALIZER", "inject", "message", "ɵformatRuntimeError", "provideClientHydration", "features", "featuresKind", "hasHttpTransferCacheOptions", "makeEnvironmentProviders", "ɵwithDomHydration", "VERSION", "Version", "makeStateKey", "makeStateKey$1", "TransferState", "TransferState$1"]
}
